*/ General observations about scala... how to run it from the shell, the style in the basic synta, and stuff like that.
/*

##################################################################################
########################       Basic Syntax        ###############################
##################################################################################



Class Names: always start with a Upper case, e.g. class Myfisrclass

Methods names: always start with lower case, and every name in it should star with upper case, e.g. def myMethodName()

Program file name: should always be the exact match with the object name; appending ".scala"

Start of every scala program:  it is mandatory to start with "def main(args: Array[string])"

Identifier: variables, objects, whatever shoul start with a letter or u

nderbar _, other way it's illegal

Operator identifier: this is some kind of operator, with cousins in java, culd be +  ++  ::: <?>

Mixed identifier: an aalphanumeric indentifier, follow by _ and an operator, by example: unary_+ , myvar_=

Literal idenfier: holly shit, wht this means?arbitraty string enclosed by back ticks, by example: `x` `<clinit>`

Literal: it's a value that could be asssign to a variable or any pther thing, by example, any number is a literal (3, 5, 6)
  , character literal is enclosed by simple quotes 'hay', string literal double-quotes "hello world", and multi-line
  strings by triple-quote
  """ Que quremos,
  soluciones
  Que os da?. """
  
  
  
 #+++++++++++++++++++++++++++++++ Escape sequences +++++++++++++++++++++++++++++++++++
  
 Allows to introduce variation while printing a sentence
 
 \t -> horizontal tab
 
 
 
  
#+++++++++++++++++++++++++++++++    Variables     +++++++++++++++++++++++++++++++++++
  
 There are two main types of variavles, the ones you can change var, and the immutable val, they are declared initially  as
 var var_name :type;
 val val_name :type;
 
 where type clould be: String, Int, Boolean, Double, Float
 
 Could be stated several variables at once
 
 val (val_name1: Int, val_name2: String) =Pair(40, "Singer")
 
 If let the inference works, then just should wirte
 val (val_name1, val_name2) =Pair(40, "Singer")
 
 
 
#+++++++++++++++++++++++++++++++    Classes     +++++++++++++++++++++++++++++++++++
 
A class define some variables, and methods; those are variables that when feeded are called objects, 
while the methos are defined usually as fuciton


 
##################################################################################
########################   Using with  the shell   ###############################
##################################################################################
 
To call a scala funtions from the shell, you must

\>scalac object_name.scala
\>scala oject_name

object_prueba2
 
 
 +++++++++++++++++++++++++++++++     Packages     +++++++++++++++++++++++++++++++++++
/* Pakages

/* declaration in the beginnning of the program */
package com.liftcode.stuff

/* importing the content of a package /*
import scala.xml._

/* importing a class or object from a package /*
import scala.collection.mutale.HashMap

/* you can import several elemnts from a package /*
import scala.collection.inmutable.{TreeMap, TreeSet}



##################################################################################
########################      Download a page      ###############################
##################################################################################

import scala.io.Source

object prueba_download {
     def main(args: Array[String]) {
       val html = Source.fromURL("http://www.boe.es")
       val s = html.mkString
       println(s)
       
   }
}

